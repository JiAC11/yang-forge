name: yangforge
description: YANG driven JS application builder
keywords:
  - build
  - config
  - datastore
  - datamodel
  - forge
  - model
  - yang
  - opnfv
  - parse
  - restjson
  - restconf
  - rpc
  - translate
  - yang-json
  - yang-yaml
  - yfc
license: Apache-2.0
schema: !yang/schema yangforge.yang
dependencies:
  yang-v1-extensions: !yang/module yang/yang-v1-extensions

rpc:
  build: !coffee/function |
    (input, output, done) ->
      console.info "should build: #{input.get 'arguments'}"
      done()
  
  config: !coffee/function |
    (input, output, done) ->

  init: !coffee/function |
    -> 

  info: !coffee/function |
    (input, output, done) ->
      targets = input.get 'arguments'
      targets.push this unless targets.length > 0
      results = for target in targets
        try (@create target).report input.get 'options'
        catch e then console.error "unable to extract info from '#{target}' module\n".red+"#{e}"
      results = results[0] if results.length is 1
      output?.set 'result', results

      # below should be called only if cli interface...
      console.info prettyjson.render results
      done()

  infuse: !coffee/function |
    (input, output, done) ->
      targets = input.get 'targets'
      unless targets.length > 0
        output.set 'message', 'no operation since no target(s) were specified'
        done()
        return

      modules = for target in targets
        console.log "<infuse> absorbing a new source '#{target.source}' into running forge"
        target = @create target.source, target.data
        (@access 'runtime.modules').push target if target?
        target

      output.set 'message', 'request processed successfully'
      output.set 'modules', modules
      console.log "<infuse> completed"
      done()
      
  defuse: !coffee/function |
    (input, output, done) ->
      (@access 'runtime.modules').remove input.get 'targets'
      output.set 'message', 'OK'
      done()

  run: !coffee/function |
    (input, output, done) ->
      @invoke 'infuse', targets: (input.get 'arguments').map (e) -> source: e
      .catch (e) -> done e
      .then (res) =>
        modules = res.get 'modules'
        console.log "<run> starting up: " + modules.map (e) -> e.name

