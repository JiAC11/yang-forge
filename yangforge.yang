module yangforge {
  prefix yf;

  include yang-v1-extensions;

  organization
    "ClearPath Networks NFV R&D Group";

  contact
    "Web:  <http://www.clearpathnet.com>
     Code: <http://github.com/clearpath-networks/yangforge>

     Author: Peter K. Lee <mailto:plee@clearpathnet.com>";

  description
    "This module provides YANG v1 language based schema compilations.";

  revision 2015-05-04 {
    description "Initial revision";
    reference "RFC-6020";
  }

  feature cli {
    description "When enabled, generates command-line interface for the module";
  }

  feature express {
    description "When enabled, generates HTTP/HTTPS web server instance for the module";
  }
  
  feature restjson {
    description "When enabled, generates REST/JSON web services interface for the module";
    if-feature express;
  }
  
  grouping compiler-rules {
    description
      "The compiler-rules specify parameters used during compile operation.";
    
    list dependencies {
      description
        "The map defines a list of modules and their source definition. It is
         referenced by the compiler to locate the module for retrieval
         during include/import operation.";
      
      key name;
      leaf name { type string; }
      leaf source { type string; }
    }

    list extensions {
      leaf name     { type string; mandatory true; }
      leaf resolver { type binary; mandatory true; }
    }
    
    list importers {
      leaf regexp { type regexp; }
      leaf importer { type binary; }
      ordered-by user;
    }

    list procedures {
      leaf name { type string; mandatory true; }
      leaf exec { type binary; mandatory true; }
    }
  }

  grouping meta-module {
    description
      "The meta-module describes configuration structure for import/export operations.";
    
    leaf name   { type string; mandatory true; }
    leaf source { type uri; }
    leaf schema { type string; }
    
    uses compiler-rules;
  }

  grouping cli-command {
    description
      "The cli-command schema provides general schema format for defining CLI interface RPC input format";
    leaf-list arguments {
      description "The arguments should be 'refined' by uses to override config to true if used";
      type string;
      config false;
    }
    container options {
      description "Placeholder to be 'augmented' during uses to add additional leaf nodes";
    }
  }

  grouping unique-element {
    leaf id { type uuid; default auto; }
    leaf name { type string; mandatory true; }
    leaf description { type string; }
    leaf status { type boolean; default false; }
  }
  
  container runtime {
    config false;
    list modules {
      description
        "Provides state information about available modules for the current runtime context";
      uses unique-element;
      key "name";
    }
    list features {
      description
        "Provides state information about available features for the current runtime context";
      uses unique-element;
      key "name";
    }
  }
  
  // RPC definitions for CLI
  
  rpc build {
    if-feature cli;
    description "package the application for deployment";
    input {
      uses cli-command {
        refine arguments {
          config true;
          description "name";
        }
        augment options {
          leaf save { type empty; }
          leaf force { type boolean; }
        }
      }
    }
    status planned;
  }

  rpc config {
    if-feature cli;
    description "manage application configuration data";
    input {
      uses cli-command {
        // choice argument {
        //   case set {
        //     container argument {
        //       leaf key { type string; mandatory true; }
        //       leaf value { type string; mandatory true; }
        //     }
        //   }
        //   case get {
        //     leaf argument { type string; mandatory true; units key; }
        //   }
        //   case delete {
        //     leaf argument { type string; mandatory true; units key; }
        //   }
        //   case list {
        //     leaf argument { type empty; }
        //   }
        // }
      }
    }
    status planned;
  }
  
  rpc deploy {
    if-feature cli;
    description "deploy application into yangforge endpoint";
    status planned;
  }
  
  rpc info {
    if-feature cli;
    description "show info about one or more packages";
    input {
      uses cli-command {
        refine arguments {
          config true;
          description "name";
        }
        augment options {
          leaf verbose {
            description "increase verbosity";
            type empty;
            units v;
          }
        }
      }
    }
    output {
      leaf-list result { type object; }
    }
  }

  rpc init {
    if-feature cli;
    description "initialize package configuration";
  }
  
  rpc install {
    if-feature cli;
    description "install one or more packages";
    input {
      uses cli-command {
        refine arguments {
          config true;
          description "package";
        }
        augment options {
          leaf save {
            description "add package into dependencies";
            type empty;
            units s;
          }
        }
      }
    }
  }

  rpc list {
    if-feature cli;
    description "list installed packages";
    input {
      uses cli-command {
        refine arguments {
          config true;
          description "package";
        } 
        augment options {
          leaf verbose {
            description "increase verbosity";
            type empty;
            units v;
          }
        }
      }
    }
  }

  rpc publish {
    if-feature cli;
    description "publish package to upstream registry";
    input {
      uses cli-command {
        augment options {
          leaf registry {
            description "specify target registry";
            type string;
            units r;
          }
        }
      }
    }
    status planned;
  }
  
  rpc run {
    if-feature cli;
    description "runs one or more modules and/or schemas";
    input {
      uses cli-command {
        refine arguments {
          config true;
          description "module";
        }
        augment options {
          leaf cli {
            description "enables commmand-line-interface";
            type boolean;
          }
          leaf express {
            description "enables express web server on a specified port";
            type number;
            default 5000;
          }
          leaf restjson {
            description "enables REST/JSON interface";
            type boolean;
            default true;
          }
          leaf autodoc {
            description "enables auto-generated documentation interface";
            type boolean;
            default false;
          }
        }
      }
    }
  }

  rpc schema {
    if-feature cli;
    description "process YANG schema files";
    input {
      uses cli-command {
        augment options {
          leaf compile {
            description "compile input file into specified output format";
            type string;
            units c;
          }
          leaf eval {
            description "pass a string from the command line as input";
            type string;
            units e;
          }
          leaf format {
            description "specify output format (yaml, json)";
            type string;
            units f;
            default yaml;
          }
          leaf output {
            description "set the output directory for compiled schemas";
            type string;
            units o;
          }
        }
      }
    }
  }
  
  rpc sign {
    if-feature cli;
    description "sign package to ensure authenticity";
    status planned;
  }

  // RPC definitions for server instance

  rpc enable {
    description "enables passed-in set of feature(s) for the current runtime";
    input {
      leaf-list features { type string; }
    }
    output {
      list features { uses unique-element; key "id"; }
    }
  }
  
  rpc infuse {
    if-feature express;
    description "absorb requested module(s) into current runtime execution";
    input {
      list targets {
        leaf source { type string; }
        container data {
          description "initial configuration data for the source module";
        }
      }
    }
    output {
      leaf message { type string; }
      leaf-list modules { type object; }
    }
    status current;
  }
  
  rpc export {
    if-feature express;
    description "export existing target module for remote execution";
    input {
      leaf name { type string; mandatory true; }
      leaf format { type string; default json; }
    }
    output { uses meta-module; }
    status planned;
  }
}
