module yang-forge {
  namespace "urn:corenova:yang:yang-forge";
  prefix forge;
  yang-version 1.1;

  import ietf-yang-types   { prefix yang; }
  import yang-meta-types   { prefix meta; }
  import node-package-manager { prefix npm; }

  organization
    "Corenova Technologies, Inc.";
  contact
    "Peter K. Lee <peter@corenova.com>";
  description
    "This module provides YANG schema and package management operations";

  revision 2016-11-09 {
    description "Updated to YANG 1.1 and revised with npm and commander module dependencies";
  }
  revision 2016-03-25 {
    description "Enhanced with 0.12.x functionality";
  }
  revision 2015-09-23 {
    description "Enhanced with 0.10.x functionality";
  }
  revision 2015-05-04 {
    description "Initial revision";
  }

  identity component-provider;

  typedef component-name {
    type meta:meta-identifier;
  }
  /*
   * Groupings
   */
  grouping component {
    leaf provider {
      type identityref {
        base component-provider;
      }
    }
    leaf name {
      type forge:component-name;
    }
    list build {
      key "version";
      leaf version {
        type meta:semantic-version;
      }
      leaf timestamp {
        type yang:date-and-time;
      }
      leaf manifest {
        config false;
        type instance-identifier;
        require-instance true;
      }
      leaf source {
        config false;
        type instance-identifier;
        require-instance true;
      }
      leaf schema {
        config false;
        type instance-identifier;
        require-instance true;
      }
    }
    leaf created {
      config false;
      type yang:date-and-time;
    }
    leaf modified {
      config false;
      type yang:date-and-time;
    }
    leaf latest {
      config false;
      type leafref {
        path "../build/version";
      }
    }
    container downloads {
      config false;
      leaf last-day {
        type uint64;
        default 0;
      }
      leaf last-week {
        type uint64;
        default 0;
      }
      leaf last-month {
        type uint64;
        default 0;
      }
      leaf total {
        type uint64;
        default 0;
      }
    }
  }
  grouping comopnents-list {
    list component {
      key 'name';
      uses forge:component {
        augment "component/build" {
          unique "id";
          leaf id {
            config false;
            type yang:uuid;
          }
          leaf-list dependencies {
            config false;
            type leafref {
              path "/forge:catalog/component/build/id";
            }
          }
        }
      }
      action update;
    }
  }
  grouping core-manifest {
    description
      "The core essence of the module contained in the package.";
    leaf id {
      config false;
      type yang:uuid;
    }
    leaf package {
      type leafref {
        path "/npm:registry/package/id";
      }
      mandatory true;
    }
    leaf source {
      type leafref {
        path "/npm:registry/source/id";
      }
      mandatory true;
    }
    leaf-list dependency {
      type leafref {
        path "/forge:registry/core/id";
      }
    }
    leaf-list dependent {
      type leafref {
        path "/forge:registry/core/id";
      }
    }
    list model {
      key name;
      leaf name {
        type yang:yang-identifier;
      }
      leaf source {
        type meta:file-name;
      }
    }
  }
  grouping cores-list {
    list core {
      key "name version";
      uses forge:core-manifest;
    }
  }
  /*
   * Configuration Data Node Extensions
   */
  augment "/npm:registry/package" {
    leaf linked {
      type boolean;
      default false;
    }
    action link {
      output {
        uses forge:component;
      }
    }
  }
  /*
   * Configuration Data Nodes
   */
  container catalog {
    uses forge:components-list;
    action import {
      input {
        uses component-identifier;
      }
    }
  }
  /*
   * Remote Procedure Operations
   */
  rpc transform {
    description
      "Transforms input JSON or JS object source into forge:package-analysis data model.";
    input {
      anydata source {
        description "JSON text or JS object representing package.json content";
        mandatory true;
      }
    }
    output {
      uses forge:package-analysis;
    }
  }
  rpc analyze {
    description
      "Analyze a component "
  }
  
  rpc query {
    description
      "Query NPM registry recursively for information about package(s)"
    input {
      uses npm:package-selection-list {
        refine "package" {
          min-elements 1;
          max-elements 10;
        }
      }
    }
    output {
      uses forge:package-analysis-list {
        refine "package" {
          min-elements 1;
        }
      }
    }
  }
  rpc build {
    description
      "Build a core-manifest for a specified package.";
    input {
      uses npm:package-selection;
    }
    output {
      uses forge:package-analysis-list {
        
      }
      uses forge:package-analysis;
    }
  }
}
