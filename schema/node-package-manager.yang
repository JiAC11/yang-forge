module node-package-manager {
  namespace "urn:ietf:params:xml:ns:yang:node-package-manager";
  prefix npm;
  yang-version 1.1;

  import yang-meta-types { prefix meta; }
  include node-package-specification;
  
  organization
    "Corenova Technologies, Inc.";
  contact
    "Peter K. Lee <peter@corenova.com>";
  
  description
    "This module provides model-driven abstractions for Node.js Package Manager";

  revision 2016-11-08 {
    description
      "Initial revision.";
  }

  feature remote-registry {
    description "System provides remote registry transaction capability.";
  }
  
  /*
   * Groupings
   */
  grouping project {
    leaf name {
      type npm:package-name;
    }
    list revision {
      key "version";
      leaf version {
        type meta:semantic-version;
      }
      leaf timestamp {
        type yang:date-and-time;
      }
      leaf package {
        config false;
        type instance-identifier;
      }
      leaf source {
        config false;
        type instance-identifier;
      }
    }
    leaf current {
      config false;
      type leafref {
        path "../revision/version";
      }
    }
    leaf created {
      config false;
      type yang:date-and-time;
    }
    leaf modified {
      config false;
      type yang:date-and-time;
    }
    leaf revisions-count {
      config false;
      type uint32;
      units "revs";
      description "Number of revisions for the project";
    }
    container downloads {
      config false;
      leaf last-day {
        type uint64;
        default 0;
      }
      leaf last-week {
        type uint64;
        default 0;
      }
      leaf last-month {
        type uint64;
        default 0;
      }
      leaf total {
        type uint64;
        default 0;
      }
    }
  }
  grouping projects-list {
    list project {
      key 'name';
      uses npm:project;
      action update;
    }
  }
  grouping packages-list {
    list package {
      key "name version";
      uses npm:package-manifest;
      action trace {
        description
          "Recursively follow required external dependencies and returns the
           dependency tree.";
      }
      action serialize {
        description
          "Converts current package manifest object into string format based on
           requested output format.";
        input {
          leaf format {
            type enumeration {
              enum json;
              enum yaml;
            }
            default json;
          }
        }
        output {
          leaf data {
            description "contains the serialized package manifest data";
            type string;
          }
        }
      }
    }
  }
  grouping sources-list {
    list source {
      key id;
      leaf id {
        type leafref {
          path "/registry/package/dist/shasum";
        }
      }
      leaf bytes {
        type uint32;
        default 0;
      }
      leaf-list contents {
        type meta:file-name;
      }
      leaf data {
        type binary;
      }
    }
  }
  grouping package-selection {
    leaf name {
      type npm:package-name;
      mandatory true;
    }
    leaf source {
      type union {
        type meta:semantic-version-match;
        type string {
          pattern "^latest$";
        }
      }
      default "latest";
    }
  }
  /*
   * Configuration data nodes
   */
  container specification {
    leaf-list keywords {
      type meta:meta-identifier;
    }
  }
  container registry {
    config false;
    uses npm:projects-list;
    uses npm:packages-list;
    uses npm:sources-list;
    leaf projects-count {
      type uint32;
      default 0;
    }
    leaf packages-count {
      type uint32;
      default 0;
    }
    leaf sources-count {
      type uint32;
      default 0;
    }
  }
  container policy {
    container cache {
      leaf enabled {
        type boolean;
        default true;
      }
      leaf directory {
        type meta:file-name;
        default "/tmp/npm-cache";
      }
    }
  }
  /*
   * Remote Procedure Operations
   */
  rpc transform {
    description
      "Transforms input JSON or JS object source into npm:package-manifest data model.";
    input {
      anydata source {
        description "JSON text or JS object representing package.json content";
        mandatory true;
      }
    }
    output {
      uses npm:package-manifest;
    }
  }
  rpc sync {
    if-feature npm:remote-registry;
    description
      "Synchronize with NPM registry for information about package(s)";
    input {
      list package {
        key "name source";
        uses npm:package-selection;
        min-elements 1;
        max-elements 50;
      }
    }
    output {
      leaf projects {
        type uint32;
        default 0;
      }
      leaf packages {
        type uint32;
        default 0;
      }
      leaf sources {
        type uint32;
        default 0;
      }
    }
  }
  rpc query {
    description
      "Query local registry for matching package manifest(s)";
    //alias info, show
    input {
      uses npm:package-selection;
    }
    output {
      uses npm:packages-list {
        refine "package" {
          min-elements 1;
        }
      }
    }
  }
}
