module node-package-manager {
  namespace "urn:ietf:params:xml:ns:yang:node-package-manager";
  prefix npm;
  yang-version 1.1;

  import yang-meta-types { prefix meta; }
  include node-package-specification;
  
  organization
    "Corenova Technologies, Inc.";
  contact
    "Peter K. Lee <peter@corenova.com>";
  
  description
    "This module provides model-driven abstractions for Node.js Package Manager";

  revision 2016-11-08 {
    description
      "Initial revision.";
  }

  feature controller {
    description "System provides transaction controller support.";
  }
  
  /*
   * Groupings
   */
  grouping packages-list {
    list package {
      key "name version";
      uses npm:package-manifest;
      action serialize {
        description
          "The serialize converts current package manifest object into string
         format based on requested output format.";
        input {
          leaf format {
            type enumeration {
              enum json;
              enum yaml;
            }
            default json;
          }
        }
        output {
          leaf data {
            description "contains the serialized package manifest data";
            type string;
          }
        }
      }
    }
  }
  grouping implicit-package-sources-list {
    list package {
      key "name source";
      leaf name {
        type npm:package-name;
      }
      leaf source {
        type union {
          type meta:semantic-version-match;
          type string {
            pattern "^latest$";
          }
        }
        default "latest";
      }
    }
  }
  grouping explicit-package-sources-list {
    list package {
      key "name source";
      leaf name {
        type npm:package-name;
      }
      leaf source {
        type union {
          type meta:semantic-version;
          type string {
            pattern "^latest$";
          }
        }
        default "latest";
      }
    }
  }
  grouping source-stats {
    leaf bytes {
      type uint32;
      default 0;
    }
    leaf-list contents {
      type meta:file-name;
    }
  }
  grouping sources-list {
    list source {
      key id;
      leaf id {
        type leafref {
          path "/registry/package/dist/shasum";
        }
      }
      leaf data {
        type binary;
      }
      uses npm:source-stats;
    }
  }
  /*
   * Configuration data nodes
   */
  container specification {
    leaf-list keywords {
      type meta:meta-identifier;
    }
  }
  container registry {
    config false;
    uses npm:packages-list {
      augment "package/dist" {
        leaf cached {
          type boolean;
          default false;
        }
      }
    }
    uses npm:sources-list {
      augment "source" {
        leaf exists {
          type boolean;
          default false;
        }
      }
    }
    leaf packages-count {
      type uint32;
      default 0;
    }
    leaf sources-count {
      type uint32;
      default 0;
    }
  }
  container policy {
    container cache {
      leaf enabled {
        type boolean;
        default true;
      }
      leaf directory {
        type meta:file-name;
        default "/tmp/npm-cache";
      }
    }
  }
  /*
   * Remote Procedure Operations
   */
  rpc transform {
    description
      "Transforms input JSON or JS object source into package-manifest data model.";
    input {
      anydata source {
        description "JSON text or JS object representing package.json content";
        mandatory true;
      }
    }
    output {
      uses npm:package-manifest;
    }
  }
  rpc query {
    if-feature npm:controller;
    description
      "Query NPM repository for information about package(s)";
    //alias info, show
    input {
      uses npm:implicit-package-sources-list {
        refine package {
          min-elements 1;
          max-elements 50;
        }
      }
    }
    output {
      uses npm:packages-list {
        refine "package" {
          min-elements 1;
        }
      }
    }
  }
  rpc fetch {
    if-feature npm:controller;
    description
      "Fetch package(s) to internal local filesystem.";
    input {
      uses npm:explicit-package-sources-list {
        refine package {
          min-elements 1;
          max-elements 50;
        }
      }
    }
    output {
      uses npm:sources-list;
    }
  }
}
