<div class="container">
  <div id="main">Loading...</div>
  <div id="debug"/>
</div>
<script type="text/coffeescript">
  Forge.invoke 'connect', window.location.origin + '/browser'
  .then (io) ->
    console.log 'connected to /browser'

</script>
<script type="text/coffeescript">
  synth    = Forge.require 'data-synth'
  traverse = Forge.require 'traverse'

  React = Forge.require 'react'
  ReactDOM = Forge.require 'react-dom'
  { nav, section, div, span, p, a, ul, ol, li, dl, dt, dd } = React.DOM
  { form, label, input, textarea, select, option, button } = React.DOM
  { pre, code, img, em, i, b, strong } = React.DOM
  { h1, h2, h3, h4, h5, h6 } = React.DOM

  Reactor = (-> (React.createFactory this) arguments... )

  Highlight = Reactor.bind Forge.require 'react-highlight'
  Textarea  = Reactor.bind Forge.require 'react-textarea-autosize'

  Moment = Forge.require 'moment'
  (Forge.require 'moment-localizer') Moment
  DateTimePicker = Reactor.bind (Forge.require 'react-widgets').DateTimePicker

  Request = Forge.require 'superagent'

  ZingChart = Reactor.bind class extends React.Component
    constructor: ->
      super
      @chart = Forge.require 'zingchart'
      @chart.MODULESDIR = "/browser/zingchart/modules/"

    @defaultProps =
      width:  600
      height: 400
      theme: 'light'

    componentDidMount: ->
      @chart.render
        id:     @props.id
        width:  @props.width
        height: @props.height
        data:   @props.data
        theme:  @props.theme ? 'light'

    shouldComponentUpdate: (nextProps, nextState) ->
      #Lazy object comparison
      (JSON.stringify nextProps.data) isnt (JSON.stringify @props.data)

    componentWillUpdate : (nextProps) ->
      @chart.exec @props.id, 'setdata', data: nextProps.data

    render: -> (div id: @props.id)

  TreeMapChart = Reactor.bind class extends React.Component
    @defaultProps =
      theme: 'classic'

    componentDidMount: ->
      # TODO
      # $("##{@props.id}").on 'node_click', (e) -> console.log "clicked!"; console.log arguments
      # $("##{@props.id}").on 'click', (e) -> console.log "dom click!"; console.log arguments

    render: ->
      options = {}
      options['max-depth'] = @props.depth if @props.depth?
      #'alpha-aspect': true

      (ZingChart
        id:     @props.id
        height: @props.height
        width:  @props.width
        theme:  @props.theme
        data:
          type: 'treemap'
          options: options
          series: @props.series)

  Alert = Reactor.bind class extends React.Component
    @defaultProps =
      dismissible: false
      status: 'info'
    render: ->
      { title, status, message, dismissible } = @props
      (div
        className: "alert alert-#{status} #{if dismissible then 'alert-dismissible'}"
        role: 'alert'
        (button type: 'button', className: 'close', 'data-dismiss': 'alert', 'aria-label': 'Close',
          (span 'aria-hidden': true, "x")) if dismissible?
        (strong {}, title) if title?
        ' '
        message)

  Callout = Reactor.bind class extends React.Component
    @defaultProps =
      status: 'default'
    render: ->
      { title, status } = @props
      items = @props.children
      items = [ items ] unless Array.isArray items
      (div className: "bs-callout bs-callout-#{status}",
        (h4 {}, title) if title?
        items...)

  ButtonGroup = Reactor.bind class extends React.Component
    @defaultProps =
      size: ''
      align: ''

    componentDidMount: ->
      # TODO
      #$("#{@props.id} input").on 'change', (e) -> console.log "TOGGLE"; console.log arguments

    render: ->
      size = if @props.size then "btn-group-#{@props.size}" else ''
      buttons = @props.children
      buttons = [ buttons ] unless Array.isArray buttons
      (div
        id: @props.id
        role: 'group'
        className: "btn-group #{size} #{@props.align}"
        'data-toggle': 'buttons'
        buttons.map (x) ->
          x.on? 'click', (e) ->
            console.log 'clicked button!'
            console.log e
          x
      )

  TreeLeaf = Reactor.bind class extends React.Component
    constructor: ->
      super
      @state = value: @props.value, editing: false

    edit: ->
      # TODO
      #@setState editing: true

    update: (event) -> @setState value: event.target.value

    render: ->
      li className: 'tree-leaf', switch
        when @props.parent instanceof Array
          (code {}, "#{@props.value}")
        else div className: 'form-horizontal row', [
          label className: 'control-label col-sm-3', "#{@props.name}:"
          (span className: 'col-sm-9', onClick: (@edit.bind this), switch
            when @state.editing
              # TODO if @state.value is multi-line show a textarea
              [
                (input
                  className: 'form-control'
                  value: @state.value
                  onChange: (@update.bind this)
                )
              ]
            when @props.value instanceof Function
              (Highlight className: 'js', "#{@props.value}")
            else
              (Highlight className: '', "#{@props.value}")
          )
        ]

  TreeNode = Reactor.bind class extends React.Component
    @defaultProps =
      collapsed: true

    constructor: ->
      super
      @state = collapsed: @props.collapsed

    toggle: -> @setState collapsed: !@state.collapsed

    render: ->
      if @props.value? and typeof @props.value is 'object'
        if (Object.keys @props.value).length is 0
          return (li {})
        icon = if @state.collapsed then 'plus' else 'minus'
        (li className: 'tree-node', [
          a className: 'nav-header', onClick: (@toggle.bind this), [
            span className: "glyphicon glyphicon-#{icon}"
            ' '
            @props.name
          ]
          (TreeView
            value: @props.value
            parent: this
            sort: @props.sort
            collapsed: @state.collapsed)
        ])
      else (TreeLeaf @props)

  TreeView = Reactor.bind class extends React.Component
    @defaultProps =
      sort: true

    render: ->
      return (ul {}) if @props.collapsed is true or not @props.value?
      # should make this optional (but good as default)
      collapsed = Object.keys(@props.value).length isnt 1
      nodes = (for own k, v of @props.value
        (TreeNode
          name: k
          value: v
          parent: @props.value
          collapsed: collapsed
          sort: @props.sort)
      )
      if @props.sort
        nodes.sort (a, b) ->
          switch
            when typeof a.props.value isnt 'object' then -1
            when typeof b.props.value isnt 'object' then 1
            else 0
      tree = if @props.parent? then 'tree' else 'top'
      (ul className: "nav nav-list #{tree}", nodes)

  ListView = Reactor.bind class extends React.Component
    constructor: -> super; @state = selected: @props.selected

    @defaultProps =
      showBadge: false

    selectItem: (idx) ->
      @setState selected: idx
      @props.selectItem? idx

    render: ->
      leafs = []
      console.log "rendering ListView: #{@props.selected}"
      nodes = (for own k, v of @props.value
        active = if @props.selected is k then 'list-group-item-info' else ''
        switch
          when v instanceof Object
            (a
              href: "##{k}"
              className: "list-group-item #{active}"
              onClick: (@selectItem.bind this, k), [
                (span className: 'badge', (Object.keys v).length) if @props.showBadge
                k
              ]
            )
          else
            leafs.push v
            undefined
      )
      (div className: 'list-group', nodes.filter (e) -> e?)

  PanelView = Reactor.bind class extends React.Component
    @defaultProps =
      panelType: 'default'

    render: ->
      (div className: "panel panel-#{@props.panelType}", [
        (div className: 'panel-heading', @props.heading)
        (div className: 'panel-body', (p {}, @props.body)) if @props.body?
        @props.children...
      ])

  SliderView = Reactor.bind class extends React.Component
    constructor: ->
      super
      @state = selected: @props.selected

    @defaultProps =
      interval: 0
      selectItem: (idx) -> console.warn 'ignoring update to callee: %s', idx

    componentDidMount: ->
      $('#slider').on 'slid.bs.carousel', (e) => @props.selectItem e.relatedTarget.id

    render: ->
      items = @props.children.map (x) =>
        active = if x.props.id is @state.selected then 'active' else ''
        (div id: x.props.id, className: "item #{active}", [
          x
          (div className: 'carousel-caption', [
            (h3 {}, x.props.name)
            (p {}, x.props.description)
          ])
        ])
      (div
        id: 'slider'
        className: 'carousel slide'
        'data-interval': @props.interval
        'data-ride': 'carousel'
        [
          (ol className: 'carousel-indicators',
            items.map (x, idx) =>
              active = if x.props.id is @state.selected then 'active' else ''
              (li key: idx, className: active, 'data-target': '#slider', 'data-slide-to': idx))
          (div className: 'carousel-inner', role: 'listbox', items)
          (a
            className: 'left carousel-control'
            href: '#slider'
            role: 'button'
            'data-slide': 'prev'
            (span className: 'glyphicon glyphicon-chevron-left', 'aria-hidden': true))
          (a
            className: 'right carousel-control'
            href: '#slider'
            role: 'button'
            'data-slide': 'next'
            (span className: 'glyphicon glyphicon-chevron-right', 'aria-hidden': true))
        ]
      )

  MenubarView = Reactor.bind class extends React.Component
    render: ->
      items = @props.children
      (nav className: 'navbar navbar-default',
        (div className: 'container',
          (ul className: 'nav navbar-nav',
            items.map (x) =>
              active = if @props.active is x.props.name then 'active' else ''
              (li className: active, x)
          )
        )
      )

  # TODO
  TabView = Reactor.bind class extends React.Component
    render: ->
      (div id: @props.id, [
        (ul role: 'tablist', className: 'nav nav-tabs', [
          (li role: 'presentation', className: 'active',
            (a
              href: '#op-output'
              role: 'tab'
              'aria-controls': 'op-output'
              'data-toggle': 'tab', 'Response'))
          (li role: 'presentation',
            (a
              href: '#op-input'
              role: 'tab'
              'aria-controls': 'op-input'
              'data-toggle': 'tab', 'Request'))
        ])
        (div className: 'tab-content', [
          (div
            id: 'op-output'
            role: 'tabpanel', className: 'tab-pane active',
            (Highlight className: 'json', "{ 'hi': 'there' }"))
          (div
            id: 'op-input'
            role: 'tabpanel', className: 'tab-pane',
            (Highlight className: 'json', "[]"))
        ])
      ])

  FormView = Reactor.bind class extends React.Component
    constructor: (props) ->
      super
      @state = name: props.name, data: props.data, disabled: false

    @defaultProps =
      submitLabel: 'Submit'

    componentWillReceiveProps: (nextProps) ->
      if @state.name isnt nextProps.name
        @setState name: nextProps.name, data: nextProps.data, disabled: false

    onSubmit: (e) ->
      e.preventDefault()
      data = {}
      for own key, obj of @state.data
        value = switch typeof obj.value
          when 'string'
            if !!obj.value then obj.value else undefined
          else obj.value
        value = switch obj.type
          when 'array'
            if Array.isArray value then value else [ value ]
          when 'yang:date-and-time'
            value?.toJSON?()
          else value
        synth.copy data, synth.objectify key, value
      @setState disabled: true
      @props.onSubmit data
      .then (res) =>
        @setState disabled: false if res?
        res

    onChange: (name, e) ->
      data = synth.copy {}, @state.data
      data[name].value = switch
        when not e.target? then e
        when e.target.type is 'checkbox' then e.target.checked is true
        else e.target.value
      @setState data: data, disabled: false

    render: ->
      (form name: @props.name, className: 'form-horizontal', onSubmit: (@onSubmit.bind this), [
        (div {}, (for own key, x of @state.data
          (div className: 'form-group', [
            (label className: 'col-sm-3 control-label', key)
            # TODO: make this more dynamic rendering based on 'typedef'
            (div className: 'col-sm-5', switch x.type
              when 'enumeration'
                (select
                  className: 'form-control'
                  value: x.value
                  onChange: (@onChange.bind this, key)
                  (option value: opt, opt) for opt, param of x.enum
                )
              when 'boolean'
                (div className: 'checkbox',
                  (label {},
                    (input type: 'checkbox', defaultChecked: x.value, onChange: (@onChange.bind this, key) ))
                 )
              when 'textarea'
                (Textarea className: 'form-control', value: x.value, onChange: (@onChange.bind this, key))
              when 'yang:date-and-time'
                (DateTimePicker
                  defaultValue: x.value
                  onChange: (@onChange.bind this, key)
                  min: new Date()
                  step: 30)
              else
                type = switch
                  when /password/.test x.type then 'password'
                  when /[u]*int[0-9]+/.test x.type then 'number'
                  else 'text'
                (input
                  type: type
                  className: 'form-control'
                  value: x.value
                  readOnly: (x.config is false)
                  onChange: (@onChange.bind this, key))
            )
            (div className: 'col-sm-4',
              (div className: 'form-control-static',
                (em {}, switch x.type
                  when 'array' then "#{x.type} (#{x.subtype})"
                  else x.type
                )
              ))
          ]))
        )
        (div className: 'form-group',
          (div className: 'col-sm-offset-3 col-sm-10',
            (button
              type: 'submit',
              className: 'btn btn-default'
              disabled: @state.disabled
              @props.submitLabel
            )
          )
        )
      ])

  OperationView = Reactor.bind class extends React.Component
    constructor: ->
      super
      @state = error: null, result: null

    invoke: (data) ->
      @props.invoke data
      .then (res) =>
        output = res.get?() ? res
        if typeof output is 'object'
          output = JSON.stringify output, null, 2
        @setState
          error: null
          result:
            input:  JSON.stringify data, null, 2
            output: output
        res
      .catch (err) =>
        console.error err
        @setState error: err, result: null

    componentWillReceiveProps: (nextProps) ->
      if @props.name isnt nextProps.name
        @setState error: null, result: null

    render: ->
      params = @props.method?.params
      unless params? and params.input?
        return (div className: 'bs-callout bs-callout-warning', [
          (h4 {}, "Interative Operation not available")
          (p {}, "This operation does not have any associated schema information")
        ])

      schema = new (@props.method.input)
      data = (traverse schema.get()).reduce ((a, b) ->
        if @isLeaf
          key = [ @key ]
          parent = @parent
          while (pkey = parent?.key)
            key.unshift pkey
            parent = parent.parent
          key = key.join '.'
          prop = (schema.access key)
          if prop?.opts?.type
            type = prop.opts.type
            a[key] =
              value: b
              type: "#{type}"
              config: prop.opts.config
            switch "#{type}"
              when 'enumeration'
                a[key].enum = (prop.meta 'type').enum
              when 'array'
                subtype = prop.opts.subtype ? prop.opts.model
                if synth.instanceof subtype
                  subtype = (subtype.get 'name') ? (subtype.get 'synth')
                a[key].subtype = subtype
        return a
      ), {}

      (div className: 'operation',
        (h3 {}, params.description)
        (FormView
          name: @props.name
          data: data
          onSubmit: (@invoke.bind this)
          submitLabel: 'Invoke')
        (Alert
          dismissible: true
          status: 'danger'
          title: @state.error.name ? 'Error'
          message: @state.error.message ? @state.error
        ) if @state.error?
        (Callout title: '',
          (div {}, [
            (ul role: 'tablist', className: 'nav nav-tabs', [
              (li role: 'presentation', className: 'active',
                (a
                  href: '#op-response'
                  role: 'tab'
                  'aria-controls': 'op-response'
                  'data-toggle': 'tab', 'Response'))
              (li role: 'presentation',
                (a
                  href: '#op-request'
                  role: 'tab'
                  'aria-controls': 'op-request'
                  'data-toggle': 'tab', 'Request'))
            ])
            (div className: 'tab-content', [
              (div
                id: 'op-response'
                role: 'tabpanel', className: 'tab-pane active',
                (Highlight className: 'json', "#{@state.result.output}"))
              (div
                id: 'op-request'
                role: 'tabpanel', className: 'tab-pane',
                (Highlight className: 'json', "#{@state.result.input}"))
            ])
          ])
        ) if @state.result
      )

  IntentView = Reactor.bind class extends React.Component
    constructor: (props) ->
      super
      rpcs = (props.module.meta 'rpc') ? {}
      operations = (Object.keys rpcs)
      @state = operation: operations[0], key: props.key, interface: null

    componentWillReceiveProps: (nextProps) ->
      if @state.key isnt nextProps.key
        rpcs = (nextProps.module.meta 'rpc') ? {}
        operations = (Object.keys rpcs)
        @setState operation: operations[0], key: nextProps.key

    showOperation: (name) ->
      @setState operation: name

    changeInterface: (iface) -> @setState interface: iface

    handleIntent: (module, intent, data) ->
      method = switch @state.interface
        when 'restjson'
          (data, resolve, reject) ->
            Request
              .post "/restjson/#{module.name}/#{intent}"
              .send data
              .set 'Accept', 'application/json'
              .end (err, res) ->
                if err? or !res.ok then return reject name: err.message, message: res.text
                resolve (res.body ? res.text)
        else intent
      module.invoke method, data

    render: ->
      operations = @props.module.meta 'rpc'
      unless operations?
        return (Callout status: 'warning', title: 'Intent Interfaces not available', [
          (p {}, 'This module does not have any rpc definitions in the data schema')
        ])
      console.log "rendering IntentView: #{@state.operation}"
      (div className: 'intent row', [
        (div className: 'col-sm-3',
          (ListView value: operations, selected: @state.operation, selectItem: @showOperation.bind this)
        )
        if @state.operation of operations
          (div className: 'col-sm-9', [
            (div className: 'view-options row',
              (ButtonGroup
                align: 'pull-right', size: 'sm'
                [
                  (label
                    className: 'btn btn-default active'
                    onClick: (@changeInterface.bind this)
                    [
                      (input type: 'radio', name: 'interface', defaultChecked: true)
                      'browser'
                    ])
                  (label
                    className: 'btn btn-default'
                    onClick: (@changeInterface.bind this, 'restjson')
                    [
                      (input type: 'radio', name: 'interface')
                      'restjson'
                    ])
                ])
              )
            (OperationView
              name: @state.operation
              method: @props.module.methods?[@state.operation]
              invoke: (@handleIntent.bind this, @props.module, @state.operation)
            )
          ])
      ])

  StoreView = Reactor.bind class extends React.Component
    render: ->
      module = @props.module
      unless module.properties?
        return (Callout status: 'warning', title: 'Configuration Store not available', [
          (p {}, 'This module does not have any configuration tree in the data schema')
        ])

      models = for own name, model of module.meta 'models'
        continue unless model.get?
        records = (model.get? 'records') ? {}
        key: name, values: [ Object.keys(records).length ]
      models = models.filter (x) -> x?
      data =
        type: 'bar'
        title:
          text: 'Model Records'
          'font-color': '#777'
          'text-align': 'center'
        'scale-y':
          'minor-ticks': 1
        legend:
          layout: 'float'
          align: 'center'
          'vertical-align': 'bottom'
        series: models.map (x) -> text: x.key, values: x.values

      # hack for promise
      if (module.meta 'name') is 'opnfv-promise'
        capacity = module.get 'promise.capacity'
        labels = null
        series = for own name, elements of capacity when name isnt 'total'
          labels ?= Object.keys elements
          text: name, values: (traverse elements).reduce ((a, b) ->
            return a unless @isLeaf
            total = capacity.total[@key]
            a.push b * 100 / total
            return a
          ), []
        cdata =
          type: 'bar'
          'fill-angle': 45
          'stacked': true
          'stack-type': '100%'
          title:
            text: 'Current Capacity Utilization'
            'font-color': '#777'
            'text-align': 'center'
          legend:
            layout: 'float'
            align: 'right'
            'vertical-align': 'top'
            'alpha': 0.25
            shadow: 0
            'border-width': 0
          plotarea: margin: '75px'
          plot:
            alpha: 0.8
            animation:
              delay: 0
              effect: 3
              speed: '500'
              method: '0'
              sequence: '1'
          'scale-x':
            values: labels
            'items-overlap': true
            item:
              'font-angle': -48
              'offset-x': '5px'
          'scale-y':
            label: text: 'Resource Utilization'
          series: series

      (div id: 'store-view', className: 'row',
        if cdata?
          (div className: 'col-sm-12',
            (ZingChart id: 'promise-utilization', height: '500', width: '100%', data: cdata))
        (div className: 'col-sm-8',
          (Highlight className: 'json', JSON.stringify module.get(), null, 2))
        if data.series.length
          (div className: 'col-sm-4',
            (ZingChart id: 'model-records', height: '500', width: '100%', data: data))
      )

  SourceView = Reactor.bind class extends React.Component
    constructor: (props) ->
      super
      @state =
        selected: props.selected
        view: 'treemap'

    @defaultProps =
      selected: 'schema'

    updateSelection: (idx)   -> @setState selected: idx
    changeDisplay: (view) -> @setState view: view

    render: ->
      selected = @state.selected
      unless @props.source[selected]?
        selected = 'schema'
      data = @props.source[selected]
      dataMap = (traverse data).map (x) ->
        if @isLeaf
          return (@update text: @key, value: "#{x}".length, true)
        if @level > 5
          @update text: @key, value: Object.keys(x).length, true
        @after (y) ->
          children = switch
            when typeof y is 'object' then (v for own k, v of y)
            else [ y ]
          @update text: @key, children: children, true

      console.log "rendering SourceView: #{selected}"
      (div id: 'source-view', [
        div className: 'row', [
          (div className: 'col-sm-3',
            (ListView
              value: @props.source
              selected: selected
              showBadge: true
              selectItem: @updateSelection.bind this)
          )
          (div className: 'col-sm-9', [
            (div className: 'view-options row',
              (ButtonGroup
                id: "view-buttons"
                align: 'pull-right', size: 'sm'
                onSelect: (@changeDisplay.bind this), [
                  (label
                    className: 'btn btn-default active'
                    onClick: (@changeDisplay.bind this, 'treemap')
                    [
                      (input type: 'radio', name: 'view', defaultChecked: true)
                      'TreeMap'
                    ])
                  (label
                    className: 'btn btn-default'
                    onClick: (@changeDisplay.bind this, 'treelist')
                    [
                      (input type: 'radio', name: 'view')
                      'TreeList'
                    ])
                ])
              )
            if @state.view is 'treemap'
              (TreeMapChart
                id: "sv-treemap", height: 600, width: '100%'
                series: dataMap.children)
            else
              (TreeView value: data, auto: true)
          ])
        ]
      ])

  MainView = Reactor.bind class extends React.Component
    constructor: ->
      super
      @app = @props.app
      @state =
        modules:  Object.keys @app.properties
        selected: 'yangforge'
        view: 'source'
        views:
          source: 'View Source'
          intent: 'Intent Interfaces'
          store: 'Configuration Store'

      @app.on 'attach', =>
        @setState modules: Object.keys @app.properties

    updateSelection: (id) -> @setState selected: id
    selectView: (view) -> @setState view: view

    render: ->
      module = (@app.access @state.selected)
      app = module.parent
      source = app.constructor.extract()
      delete source.module
      delete source.bindings

      console.log "rendering MainView: #{@state.selected}"
      (section className: 'yf-main', [
        (SliderView
          selected: @state.selected
          interval: 0
          selectItem: @updateSelection.bind this
          (@state.modules.map (x) =>
            target = @app.access x
            meta = target.parent.constructor.extract()
            (div id: x, key: x, name: meta.name, description: meta.description)))
        (MenubarView
          active: @state.view
          for name, link of @state.views
            (a href: '#', key: name, name: name, onClick: (@selectView.bind this, name), link))
        switch @state.view
          when 'source' then (SourceView source: source)
          when 'intent' then (IntentView key: module.id, module: module)
          when 'store' then (StoreView key: module.id, module: module)
      ])

  ReactDOM.render (MainView app: Forge), document.getElementById 'main'

</script>
