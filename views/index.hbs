<div class="container">
  <div class="page-header">
	<h1>YF Browser <small>real-time data model viewer</small></h1>
  </div>
  <div id="main">Loading...</div>
</div>
<script type="text/coffeescript">
  Forge.invoke 'connect', window.location.origin + '/browser'
  .then (io) ->
    console.log 'connected to /browser'
    console.log = ->
</script>
<script type="text/coffeescript">
  React = Forge.require 'react'
  { nav, section, div, span, p, a, ul, ol, li, dl, dt, dd } = React.DOM
  { form, label, input, textarea, select, option, button } = React.DOM
  { pre, code, img, em, i, b, strong } = React.DOM
  { h1, h2, h3, h4, h5, h6 } = React.DOM

  Reactor = (-> (React.createFactory this) arguments... )

  ZingChart = Forge.require 'zingchart-react'
  LineChart = Reactor.bind ZingChart.line
  AreaChart = Reactor.bind ZingChart.area
  BarChart  = Reactor.bind ZingChart.bar
  PieChart  = Reactor.bind ZingChart.pie

  Highlight = Reactor.bind Forge.require 'react-highlight'

  Alert = Reactor.bind class extends React.Component
    @defaultProps =
      dismissible: false
      status: 'info'
    render: ->
      { title, status, message, dismissible } = @props
      (div
        className: "alert alert-#{status} #{if dismissible then 'alert-dismissible'}"
        role: 'alert'
        (button type: 'button', className: 'close', 'data-dismiss': 'alert', 'aria-label': 'Close',
          (span 'aria-hidden': true, "x")) if dismissible?
        (strong {}, title) if title?
        ' '
        message)

  Callout = Reactor.bind class extends React.Component
    @defaultProps =
      status: 'default'
    render: ->
      { title, status } = @props
      (div className: "bs-callout bs-callout-#{status}",
        (h4 {}, title) if title?
        @props.children...)

  TreeLeaf = Reactor.bind class extends React.Component
    constructor: ->
      super
      @state = value: @props.value, editing: false
      
    edit: ->
      # TODO
      #@setState editing: true
      
    update: (event) -> @setState value: event.target.value

    render: ->
      li className: 'tree-leaf', switch
        when @props.parent instanceof Array
          (code {}, "#{@props.value}")
        else div className: 'form-horizontal row', [
          label className: 'control-label col-sm-3', "#{@props.name}:"
          (span className: 'col-sm-9', onClick: (@edit.bind this), switch
            when @state.editing
              # TODO if @state.value is multi-line show a textarea
              [
                (input
                  className: 'form-control'
                  value: @state.value
                  onChange: (@update.bind this)
                )
              ]
            when @props.value instanceof Function
              (Highlight className: 'js', "#{@props.value}")
            else
              (Highlight className: '', "#{@props.value}")
          )
        ]

  TreeNode = Reactor.bind class extends React.Component
    @defaultProps =
      collapsed: true
      
    constructor: ->
      super
      @state = collapsed: @props.collapsed
      
    toggle: -> @setState collapsed: !@state.collapsed
      
    render: ->
      if @props.value? and typeof @props.value is 'object'
        if (Object.keys @props.value).length is 0
          return (li {})
        icon = if @state.collapsed then 'plus' else 'minus'
        (li className: 'tree-node', [
          a className: 'nav-header', onClick: (@toggle.bind this), [
            span className: "glyphicon glyphicon-#{icon}"
            ' '
            @props.name
          ]
          (TreeView
            value: @props.value
            parent: this
            sort: @props.sort
            collapsed: @state.collapsed)
        ])
      else (TreeLeaf @props)
        
  TreeView = Reactor.bind class extends React.Component
    @defaultProps =
      sort: true
      
    render: ->
      return (ul {}) if @props.collapsed is true or not @props.value?
      # should make this optional (but good as default)
      collapsed = Object.keys(@props.value).length isnt 1
      nodes = (for own k, v of @props.value
        (TreeNode
          name: k
          value: v
          parent: @props.value
          collapsed: collapsed
          sort: @props.sort)
      )
      if @props.sort
        nodes.sort (a, b) ->
          switch
            when typeof a.props.value isnt 'object' then -1
            when typeof b.props.value isnt 'object' then 1
            else 0
      tree = if @props.parent? then 'tree' else 'top'
      (ul className: "nav nav-list #{tree}", nodes)

  ListView = Reactor.bind class extends React.Component
    constructor: -> super; @state = selected: @props.selected

    @defaultProps =
      showBadge: false

    selectItem: (idx) ->
      @setState selected: idx
      @props.selectItem? idx
      
    render: ->
      leafs = []
      nodes = (for own k, v of @props.value
        active = if @props.selected is k then 'list-group-item-info' else ''
        switch
          when v instanceof Object
            (a className: "list-group-item #{active}", onClick: (@selectItem.bind this, k), [
              (span className: 'badge', (Object.keys v).length) if @props.showBadge
              k
            ])
          else
            leafs.push v
            undefined
      )
      (div className: 'list-group', nodes.filter (e) -> e?)
        
  PanelView = Reactor.bind class extends React.Component
    @defaultProps =
      panelType: 'default'
      
    render: ->
      (div className: "panel panel-#{@props.panelType}", [
        (div className: 'panel-heading', @props.heading)
        (div className: 'panel-body', (p {}, @props.body)) if @props.body?
        @props.children...
      ])

  SliderView = Reactor.bind class extends React.Component
    constructor: ->
      super
      @state =
        selected: @props.selected
        interval: @props.interval

    @defaultProps =
      selectItem: (idx) -> console.warn 'ignoring update to callee: %s', idx

    componentDidMount: ->
      $('#slider').on 'slid.bs.carousel', (e) => @props.selectItem e.relatedTarget.id
    
    render: ->
      items = @props.children.map (x) =>
        active = if x.props.id is @state.selected then 'active' else ''
        (div id: x.props.id, className: "item #{active}", [
          x
          (div className: 'carousel-caption', [
            (h3 {}, x.props.name)
            (p {}, x.props.description)
          ])
        ])
      (div
        id: 'slider'
        className: 'carousel slide'
        'data-interval': @state.interval
        'data-ride': 'carousel'
        [
          (ol className: 'carousel-indicators',
            items.map (x, idx) =>
              active = if x.props.id is @state.selected then 'active' else ''
              (li key: idx, className: active, 'data-target': '#slider', 'data-slide-to': idx))
          (div className: 'carousel-inner', role: 'listbox', items)
          (a
            className: 'left carousel-control'
            href: '#slider'
            role: 'button'
            'data-slide': 'prev'
            (span className: 'glyphicon glyphicon-chevron-left', 'aria-hidden': true)
          )
          (a
            className: 'right carousel-control'
            href: '#slider'
            role: 'button'
            'data-slide': 'next'
            (span className: 'glyphicon glyphicon-chevron-right', 'aria-hidden': true)
          )
        ]
      )
      
  SourceView = Reactor.bind class extends React.Component
    constructor: (props) ->
      super
      @state =
        selected: props.selected
        
    @defaultProps =
      selected: 'schema'

    updateSelection: (idx) -> @setState selected: idx

    render: ->
      selected = @state.selected
      unless @props.source[selected]?
        selected = 'schema'
      data = @props.source[selected]
      console.log "rendering SourceView: #{selected}"
      (div className: 'source', [
        div className: 'row', [
          (div className: 'col-sm-3',
            (ListView
              value: @props.source
              selected: selected
              showBadge: true
              selectItem: @updateSelection.bind this)
          )
          (div className: 'col-sm-9', [
            (TreeView value: data, auto: true)
          ])
        ]
      ])
      
  MenubarView = Reactor.bind class extends React.Component
    render: ->
      (nav className: 'navbar navbar-default',
        (div className: 'container',
          (ul className: 'nav navbar-nav',
            @props.children.map (x) =>
              active = if @props.active is x.props.name then 'active' else ''
              (li className: active, x)
          )
        )
      )

  synth    = Forge.require 'data-synth'
  traverse = Forge.require 'traverse'
  FormView = Reactor.bind class extends React.Component
    constructor: (props) ->
      super
      @state = name: props.name, data: props.data, disabled: false

    @defaultProps =
      submitLabel: 'Submit'

    componentWillReceiveProps: (nextProps) ->
      if @state.name isnt nextProps.name
        @setState name: nextProps.name, data: nextProps.data, disabled: false

    onSubmit: (e) ->
      e.preventDefault()
      data = {}
      for own key, obj of @state.data
        value = switch typeof obj.value
          when 'string'
            if !!obj.value then obj.value else undefined
          else obj.value
        value = switch obj.type
          when 'array'
            if Array.isArray value then value else [ value ]
          else value
        synth.copy data, synth.objectify key, value
      @setState disabled: true
      @props.onSubmit data
      .then (res) =>
        @setState disabled: false if res?
        res

    onChange: (e) ->
      data = synth.copy {}, @state.data
      data[e.target.name].value = switch e.target.type
        when 'checkbox' then e.target.checked is true
        else e.target.value
      @setState data: data, disabled: false

    render: ->
      (form name: @props.name, className: 'form-horizontal', onSubmit: (@onSubmit.bind this), [
        (div {}, (for own key, x of @state.data
          (div className: 'form-group', [
            (label className: 'col-sm-3 control-label', key)
            (div className: 'col-sm-5', switch x.type
              when 'enumeration'
                (select
                  name: key
                  className: 'form-control'
                  value: x.value
                  onChange: (@onChange.bind this)
                  (option value: opt, opt) for opt, param of x.enum
                )
              when 'boolean'
                (div className: 'checkbox',
                  (label {},
                    (input name: key, type: 'checkbox', defaultChecked: x.value, onChange: (@onChange.bind this) ))
                 )
              else
                (input
                  name: key
                  className: 'form-control'
                  value: x.value
                  onChange: (@onChange.bind this))
            )
            (div className: 'col-sm-4',
              (div className: 'form-control-static',
                (em {}, switch x.type
                  when 'array' then "#{x.type} (#{x.subtype})"
                  else x.type
                )
              ))
          ]))
        )
        (div className: 'form-group',
          (div className: 'col-sm-offset-3 col-sm-10',
            (button
              type: 'submit',
              className: 'btn btn-default'
              disabled: @state.disabled
              @props.submitLabel
            )
          )
        )
      ])
      
  OperationView = Reactor.bind class extends React.Component
    constructor: ->
      super
      @state = output: null, error: null
      
    invoke: (data) ->
      console.info data
      @props.invoke data
      .then (res) =>
        @setState error: null, output: JSON.stringify res.get(), null, 2
        res
      .catch (err) =>
        console.error err
        @setState error: err, output: null

    componentWillReceiveProps: (nextProps) ->
      @setState output: null, error: null

    render: ->
      params = @props.method?.params
      unless params? and params.input?
        return (div className: 'bs-callout bs-callout-warning', [
          (h4 {}, "Interative Operation not available")
          (p {}, "This operation does not have any associated schema information")
        ])

      schema = new (@props.method.input)
      data = (traverse schema.get()).reduce ((a, b) ->
        if @isLeaf
          key = [ @key ]
          parent = @parent
          while (pkey = parent?.key)
            key.unshift pkey
            parent = parent.parent
          key = key.join '.'
          prop = (schema.access key)
          if prop?.opts?.type
            type = prop.opts.type
            a[key] =
              value: b
              type: "#{type}"
            switch "#{type}"
              when 'enumeration'
                a[key].enum = (prop.meta 'type').enum
              when 'array'
                subtype = prop.opts.subtype ? prop.opts.model
                if synth.instanceof subtype
                  subtype = (subtype.get 'name') ? (subtype.get 'synth')
                a[key].subtype = subtype
        return a
      ), {}

      (div className: 'operation',
        (h3 {}, params.description)
        (FormView
          name: @props.name
          data: data
          onSubmit: (@invoke.bind this)
          submitLabel: 'Invoke')
        (Alert
          dismissible: true
          status: 'danger'
          title: @state.error.name ? 'Error'
          message: @state.error.message ? @state.error
        ) if @state.error?
        (Callout title: 'Result', [ (Highlight className: 'json scrollable', "#{@state.output}") ]) if @state.output
      )

  IntentView = Reactor.bind class extends React.Component
    constructor: (props) ->
      super
      rpcs = (props.module.meta 'rpc') ? {}
      operations = (Object.keys rpcs)
      @state = operation: operations[0], key: props.key

    componentWillReceiveProps: (nextProps) ->
      if @state.key isnt nextProps.key
        rpcs = (nextProps.module.meta 'rpc') ? {}
        operations = (Object.keys rpcs)
        @setState operation: operations[0], key: nextProps.key
      
    showOperation: (name) ->
      @setState operation: name

    render: ->
      operations = @props.module.meta 'rpc'
      (div className: 'intent row', [
        (div className: 'col-sm-3',
          (PanelView
            panelType: 'default'
            heading: 'Intent-based Operations'
            [
              (ListView value: operations, selected: @state.operation, selectItem: @showOperation.bind this)
            ]
          )
        )
        if @state.operation of operations
          (div className: 'col-sm-9',
            (OperationView
              name: @state.operation
              method: @props.module.methods[@state.operation]
              invoke: (@props.module.invoke.bind @props.module, @state.operation)
            )
          )
      ])

  StoreView = Reactor.bind class extends React.Component
    render: ->
      module = @props.module
      unless module.properties?
        return (Callout status: 'warning', title: 'Configuration Store not available', [
          (p {}, 'This module does not have any configuration tree in the data schema')
        ])
        
      modelSeries = (for name, model of module.meta 'models'
        continue unless model.get?
        records = (model.get? 'records') ? []
        text: name, values: [ Object.keys(records).length ]
      ).filter (x) -> x?
      
      (div id: 'store-view', className: 'row',
        (div className: 'col-sm-8',
          (Highlight className: 'json', JSON.stringify module.get(), null, 2))
        if modelSeries.length
          (div className: 'col-sm-4',
            (BarChart id: 'model-records', height: '300', width: '100%', series: modelSeries, legend: 'false', theme: 'light', title: 'Model Records'))
      )
      
  MainView = Reactor.bind class extends React.Component
    constructor: ->
      super
      @app = @props.app
      @state =
        modules:  Object.keys @app.properties
        selected: 'yangforge'
        view: 'store'
        views:
          source: 'View Source'
          intent: 'Intent Interfaces'
          store: 'Configuration Store'
          
      @app.on 'attach', =>
        @setState modules: Object.keys @app.properties

    updateSelection: (id) -> @setState selected: id
    selectView: (view) -> @setState view: view

    render: ->
      module = (@app.access @state.selected)
      app = module.parent
      source = app.constructor.extract()
      delete source.module
      delete source.bindings
      
      console.log "rendering MainView: #{@state.selected}"
      (section className: 'yf-main', [
        (SliderView
          selected: @state.selected
          interval: 0
          selectItem: @updateSelection.bind this
          (@state.modules.map (x) =>
            target = @app.access x
            meta = target.parent.constructor.extract()
            (p id: x, key: x, name: meta.name, description: meta.description, "a"))
        )
        (MenubarView
          active: @state.view
          for name, link of @state.views
            (a key: name, name: name, onClick: (@selectView.bind this, name), link)
        )
        switch @state.view
          when 'source'      then (SourceView source: source)
          when 'intent' then (IntentView key: module.id, module: module)
          when 'store' then (StoreView key: module.id, module: module)
      ])

  React.render (MainView app: Forge), document.getElementById 'main'
      
</script>
