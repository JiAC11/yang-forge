// Generated by CoffeeScript 1.9.1
(function() {
  var compiler, output;

  compiler = (require('./yang-core-compiler')).configure(function() {
    this.merge('yang/augment', {
      resolver: function(arg, params) {
        var ref;
        if ((ref = this[arg]) != null) {
          if (typeof ref.extend === "function") {
            ref.extend(params);
          }
        }
        return null;
      }
    });
    this.merge('yang/import', {
      resolver: function(arg, params) {
        this.set("module/" + params.prefix, this.get("module/" + arg));
        return null;
      }
    });
    this.merge('yang/include', {
      resolver: function(arg, params) {
        this.extend(this.get("submodule/" + arg));
        return null;
      }
    });
    this.merge('yang/belongs-to', {
      resolver: function(arg, params) {
        this.set("module/" + params.prefix, this.get("module/" + arg));
        return null;
      }
    });
    this.merge('yang/refine', {
      resolver: function(arg, params) {
        var ref;
        if ((ref = this[arg]) != null) {
          if (typeof ref.extend === "function") {
            ref.extend(params);
          }
        }
        return null;
      }
    });
    this.merge('yang/uses', {
      resolver: function(arg, params) {
        return this.get("grouping/" + arg);
      }
    });
    this.merge('yang/feature', {
      meta: true
    });
    this.merge('yang/grouping', {
      meta: true
    });
    this.merge('yang/identity', {
      meta: true
    });
    this.merge('yang/revision', {
      meta: true
    });
    this.merge('yang/typedef', {
      meta: true
    });
    this.merge('yang/module', {
      "export": true
    });
    this.merge('yang/submodule', {
      "export": true
    });
    this.merge('yang/rpc', {
      "export": true
    });
    return this.merge('yang/notification', {
      "export": true
    });
  });

  output = compiler.compile(compiler.readSchema('yang-v1-compiler.yang'));

  output.extend(compiler);

  module.exports = output;

}).call(this);
