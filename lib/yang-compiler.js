// Generated by CoffeeScript 1.9.1
(function() {
  var MetaCompiler, compiler, options, output,
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    hasProp = {}.hasOwnProperty;

  options = {
    map: {
      'yang-v1-extensions': '../yang-v1-extensions.yang'
    },
    extensions: {
      module: function(self) {
        return self;
      },
      submodule: function(self) {
        return self.set({
          collapse: true
        });
      },
      feature: function(self, arg, params) {
        return this.define('feature', arg, params);
      },
      identity: function(self, arg, params) {
        return this.define('identity', arg, params);
      },
      typedef: function(self, arg, params) {
        return this.define('typedef', arg, params);
      },
      revision: function(self, arg, params) {
        return this.define('revision', arg, params);
      },
      type: function(self) {
        return self;
      },
      container: function(self) {
        return self;
      },
      "enum": function(self) {
        return self;
      },
      leaf: function(self) {
        return self;
      },
      'leaf-list': function(self) {
        return self;
      },
      list: function(self, arg, params) {
        var children;
        children = (self.get('children')).filter(function(e) {
          return !(self["instanceof"](e));
        });
        self.reduce((function(_this) {
          return function() {
            return _this.assembleNode.apply(_this, arguments);
          };
        })(this));
        return (function(superClass) {
          extend(_Class, superClass);

          function _Class() {
            return _Class.__super__.constructor.apply(this, arguments);
          }

          _Class.set({
            yang: 'list',
            name: arg,
            model: self,
            children: children
          });

          return _Class;

        })(require('meta-class'));
      },
      input: function(self) {
        return self;
      },
      output: function(self) {
        return self;
      },
      rpc: function(self, arg) {
        var func;
        func = this.get("procedures." + arg);
        return self.configure(function() {
          this.set({
            action: true
          });
          return this.include({
            exec: func
          });
        });
      },
      notification: function(self) {
        return self.set({
          action: true
        });
      },
      'belongs-to': function(self, arg, params) {
        return this.define('module', params.prefix, this.resolve('module', arg));
      },
      uses: function(self, arg) {
        return this.resolve('grouping', arg);
      },
      grouping: function(self, arg, params) {
        self.set({
          collapse: true
        });
        return this.define('grouping', arg, self);
      },
      augment: function(self, arg, params) {
        var ref;
        if ((ref = this[arg]) != null) {
          if (typeof ref.extend === "function") {
            ref.extend(params);
          }
        }
        return void 0;
      },
      refine: function(self, arg, params) {
        var ref;
        if ((ref = this[arg]) != null) {
          if (typeof ref.extend === "function") {
            ref.extend(params);
          }
        }
        return void 0;
      },
      "import": function(self, arg, params) {
        var mod;
        mod = this["import"]({
          name: arg
        });
        if (params.prefix == null) {
          params.prefix = mod != null ? mod.prefix : void 0;
        }
        return this.define('module', params.prefix, mod);
      }
    },
    procedures: {
      "import": function(input) {
        return this["import"](input);
      }
    }
  };

  MetaCompiler = require('./yang-meta-compiler');

  compiler = new MetaCompiler(options);

  output = compiler.compile(function() {
    var file, path;
    path = require('path');
    file = path.resolve(__dirname, '../yang-compiler.yang');
    return (require('fs')).readFileSync(file, 'utf-8');
  });

  output.mixin(MetaCompiler, require('./yang-compiler-mixin'));

  module.exports = output;

}).call(this);
